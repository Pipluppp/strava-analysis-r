---
title: "strava_analysis"
format: html
editor: visual
output:
    df_print: paged
---

## Data tidy

```{r}
library(tidyverse)
library(janitor)
library(viridis)
library(scales)
library(ggridges)

data <- read_csv("activities.csv")
data <- data |> janitor::clean_names()
data
```

Select needed columns and only take runs

```{r}
data_select <- data |> 
    select(activity_id:activity_type) |> 
    filter (activity_type == "Run")
```

Convert to POSIXct and fixes 8-hour time difference from Strava export

```{r}
data_select$activity_date <- data_select$activity_date |>
    lubridate::parse_date_time("mdyIMs p") |> # month, day, year, hour, minute, sec, pm/am
    (`+`)(hours(8)) # adds hours(8), implicit function using ()()
```

Add `date` and `wday` columns

```{r}
data_date <- data_select |> 
    mutate(
        date = lubridate::as_date(activity_date), .after = activity_date,
        wday = wday(date, label = TRUE)
    )
```

Reuse `activity_date` column as new `time` column

```{r}
data_time <- data_date |> 
    rename(time = activity_date) |> 
    relocate(time, .after = date)
```

Remove date component of `time` (turn data type to hms, then back to POSIXct)

```{r}
data_clean <- data_time

data_clean$time <- hms::hms(
    second(data_time$time),
    minute(data_time$time),
    hour(data_time$time)
    ) |> 
    as.POSIXct()
```

## Data visualizations

> The `time` being graphed is the start time of the activity

### Bar chart

Chart runs by day of the week

```{r}
#| label: bar-chart

ggplot(
    data_clean, aes(x = wday)
) + 
    geom_bar() +
    # labels
    labs(x = "Day of the Week", y = "Count")
```

### Density plot

A density plot on the time of start of runs

```{r}
#| label: density

ggplot(data_clean) + 
    geom_density(
        aes(x = time, y = after_stat(scaled)),
        fill = "darkcyan", alpha = 0.8
    ) +
    
    # show only hours and mins for x ticks 
    scale_x_datetime(breaks = date_breaks("2 hours"), labels=date_format("%H:%M"))

```

### Histogram

```{r}
#| label: histogram

ggplot(data_clean) + 
    geom_histogram(aes(x = time), fill = "darkcyan", alpha = 0.8) +
    scale_x_datetime(
        breaks = date_breaks("2 hours"),  labels = date_format("%H:%M")
)
```

### Multiple densities

Density plots like previous but superimposed across each day of the week

```{r}
#| label: density-multi

ggplot(data_clean) + 
    geom_density(
        aes(x = time, group = wday, fill = wday, y = after_stat(scaled)), alpha = 0.5
    ) + 
    # labels
    labs(
        x = "Time", 
        group = "Day of the week", fill = "Day of the week",
    ) +
    scale_x_datetime(breaks = date_breaks("2 hours"), labels = date_format("%H:%M")) + 
    # fancier colors from viridis
    scale_fill_viridis(discrete = TRUE) 

```

### Ridgeline

Like multiple densities but separated by day, less messier

```{r}
#| label: ridgeline

ggplot(data_clean) +
    geom_density_ridges(
        aes(x = time, y = wday, fill = wday), 
        alpha = 0.7, scale = 1, show.legend = FALSE
    ) +
    labs(x = "Time", y = "Day") +
    # x-axis name and intervals
    scale_x_datetime(breaks = date_breaks("2 hours"),  labels = date_format("%H:%M")) + 
    # coloring
    scale_fill_viridis(discrete = TRUE)

```
